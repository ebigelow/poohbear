// Code generated by protoc-gen-gogo.
// source: poloniex.proto
// DO NOT EDIT!

/*
	Package poloniex is a generated protocol buffer package.

	It is generated from these files:
		poloniex.proto

	It has these top-level messages:
		Trade
		TradeBlock
		TradeBlockRange
		DateRange
*/
package poloniex

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Trade struct {
	Pair      string  `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Rate      float32 `protobuf:"fixed32,2,opt,name=rate,proto3" json:"rate,omitempty"`
	Amount    float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Total     float32 `protobuf:"fixed32,4,opt,name=total,proto3" json:"total,omitempty"`
	Timestamp string  `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptorPoloniex, []int{0} }

func (m *Trade) GetPair() string {
	if m != nil {
		return m.Pair
	}
	return ""
}

func (m *Trade) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *Trade) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Trade) GetTotal() float32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Trade) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type TradeBlock struct {
	Timestamp string   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Trades    []*Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
}

func (m *TradeBlock) Reset()                    { *m = TradeBlock{} }
func (m *TradeBlock) String() string            { return proto.CompactTextString(m) }
func (*TradeBlock) ProtoMessage()               {}
func (*TradeBlock) Descriptor() ([]byte, []int) { return fileDescriptorPoloniex, []int{1} }

func (m *TradeBlock) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *TradeBlock) GetTrades() []*Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type TradeBlockRange struct {
	Trades []*TradeBlock `protobuf:"bytes,1,rep,name=trades" json:"trades,omitempty"`
}

func (m *TradeBlockRange) Reset()                    { *m = TradeBlockRange{} }
func (m *TradeBlockRange) String() string            { return proto.CompactTextString(m) }
func (*TradeBlockRange) ProtoMessage()               {}
func (*TradeBlockRange) Descriptor() ([]byte, []int) { return fileDescriptorPoloniex, []int{2} }

func (m *TradeBlockRange) GetTrades() []*TradeBlock {
	if m != nil {
		return m.Trades
	}
	return nil
}

type DateRange struct {
	Start string `protobuf:"bytes,1,opt,name=Start,proto3" json:"Start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=End,proto3" json:"End,omitempty"`
}

func (m *DateRange) Reset()                    { *m = DateRange{} }
func (m *DateRange) String() string            { return proto.CompactTextString(m) }
func (*DateRange) ProtoMessage()               {}
func (*DateRange) Descriptor() ([]byte, []int) { return fileDescriptorPoloniex, []int{3} }

func (m *DateRange) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *DateRange) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func init() {
	proto.RegisterType((*Trade)(nil), "poloniex.Trade")
	proto.RegisterType((*TradeBlock)(nil), "poloniex.TradeBlock")
	proto.RegisterType((*TradeBlockRange)(nil), "poloniex.TradeBlockRange")
	proto.RegisterType((*DateRange)(nil), "poloniex.DateRange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TradeRange service

type TradeRangeClient interface {
	GetTradeRange(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*TradeBlockRange, error)
}

type tradeRangeClient struct {
	cc *grpc.ClientConn
}

func NewTradeRangeClient(cc *grpc.ClientConn) TradeRangeClient {
	return &tradeRangeClient{cc}
}

func (c *tradeRangeClient) GetTradeRange(ctx context.Context, in *DateRange, opts ...grpc.CallOption) (*TradeBlockRange, error) {
	out := new(TradeBlockRange)
	err := grpc.Invoke(ctx, "/poloniex.TradeRange/GetTradeRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TradeRange service

type TradeRangeServer interface {
	GetTradeRange(context.Context, *DateRange) (*TradeBlockRange, error)
}

func RegisterTradeRangeServer(s *grpc.Server, srv TradeRangeServer) {
	s.RegisterService(&_TradeRange_serviceDesc, srv)
}

func _TradeRange_GetTradeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeRangeServer).GetTradeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poloniex.TradeRange/GetTradeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeRangeServer).GetTradeRange(ctx, req.(*DateRange))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradeRange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poloniex.TradeRange",
	HandlerType: (*TradeRangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTradeRange",
			Handler:    _TradeRange_GetTradeRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poloniex.proto",
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pair) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoloniex(dAtA, i, uint64(len(m.Pair)))
		i += copy(dAtA[i:], m.Pair)
	}
	if m.Rate != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Poloniex(dAtA, i, uint32(math.Float32bits(float32(m.Rate))))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Poloniex(dAtA, i, uint32(math.Float32bits(float32(m.Amount))))
	}
	if m.Total != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Poloniex(dAtA, i, uint32(math.Float32bits(float32(m.Total))))
	}
	if len(m.Timestamp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPoloniex(dAtA, i, uint64(len(m.Timestamp)))
		i += copy(dAtA[i:], m.Timestamp)
	}
	return i, nil
}

func (m *TradeBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Timestamp) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoloniex(dAtA, i, uint64(len(m.Timestamp)))
		i += copy(dAtA[i:], m.Timestamp)
	}
	if len(m.Trades) > 0 {
		for _, msg := range m.Trades {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPoloniex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TradeBlockRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeBlockRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for _, msg := range m.Trades {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPoloniex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DateRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DateRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Start) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPoloniex(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPoloniex(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	return i, nil
}

func encodeFixed64Poloniex(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Poloniex(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPoloniex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Trade) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pair)
	if l > 0 {
		n += 1 + l + sovPoloniex(uint64(l))
	}
	if m.Rate != 0 {
		n += 5
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.Total != 0 {
		n += 5
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPoloniex(uint64(l))
	}
	return n
}

func (m *TradeBlock) Size() (n int) {
	var l int
	_ = l
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovPoloniex(uint64(l))
	}
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovPoloniex(uint64(l))
		}
	}
	return n
}

func (m *TradeBlockRange) Size() (n int) {
	var l int
	_ = l
	if len(m.Trades) > 0 {
		for _, e := range m.Trades {
			l = e.Size()
			n += 1 + l + sovPoloniex(uint64(l))
		}
	}
	return n
}

func (m *DateRange) Size() (n int) {
	var l int
	_ = l
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovPoloniex(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovPoloniex(uint64(l))
	}
	return n
}

func sovPoloniex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPoloniex(x uint64) (n int) {
	return sovPoloniex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoloniex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rate = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Amount = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Total = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoloniex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoloniex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoloniex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &Trade{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoloniex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoloniex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeBlockRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoloniex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeBlockRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeBlockRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trades = append(m.Trades, &TradeBlock{})
			if err := m.Trades[len(m.Trades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoloniex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoloniex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DateRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoloniex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DateRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DateRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoloniex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoloniex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoloniex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoloniex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoloniex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoloniex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPoloniex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPoloniex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPoloniex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPoloniex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoloniex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("poloniex.proto", fileDescriptorPoloniex) }

var fileDescriptorPoloniex = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x51, 0x4a, 0xc3, 0x40,
	0x10, 0xed, 0x26, 0x4d, 0x30, 0x23, 0xda, 0xb2, 0x06, 0x59, 0x45, 0x42, 0xc8, 0x8f, 0xf9, 0x90,
	0x7e, 0xb4, 0x07, 0x10, 0x8b, 0xe2, 0xa7, 0x90, 0x7a, 0x81, 0xd5, 0x2e, 0x12, 0x4c, 0xb2, 0x61,
	0x3b, 0x82, 0xe0, 0x45, 0x3c, 0x92, 0x9f, 0x1e, 0x41, 0xe2, 0x45, 0x24, 0xb3, 0x69, 0xa2, 0xc5,
	0xbf, 0x79, 0x6f, 0xde, 0x7b, 0x33, 0xb3, 0x0b, 0x87, 0xb5, 0x2e, 0x74, 0x95, 0xab, 0xd7, 0x59,
	0x6d, 0x34, 0x6a, 0xbe, 0xb7, 0xc5, 0xc9, 0x1b, 0x78, 0xf7, 0x46, 0xae, 0x15, 0xe7, 0x30, 0xae,
	0x65, 0x6e, 0x04, 0x8b, 0x59, 0x1a, 0x64, 0x54, 0xb7, 0x9c, 0x91, 0xa8, 0x84, 0x13, 0xb3, 0xd4,
	0xc9, 0xa8, 0xe6, 0xc7, 0xe0, 0xcb, 0x52, 0xbf, 0x54, 0x28, 0x5c, 0x62, 0x3b, 0xc4, 0x43, 0xf0,
	0x50, 0xa3, 0x2c, 0xc4, 0x98, 0x68, 0x0b, 0xf8, 0x19, 0x04, 0x98, 0x97, 0x6a, 0x83, 0xb2, 0xac,
	0x85, 0x47, 0xd1, 0x03, 0x91, 0xac, 0x00, 0x68, 0xf8, 0xb2, 0xd0, 0x8f, 0xcf, 0x7f, 0xb5, 0x6c,
	0x47, 0xcb, 0xcf, 0xc1, 0xc7, 0x56, 0xbb, 0x11, 0x4e, 0xec, 0xa6, 0xfb, 0xf3, 0xc9, 0xac, 0xbf,
	0x89, 0x32, 0xb2, 0xae, 0x9d, 0x5c, 0xc2, 0x64, 0x08, 0xcd, 0x64, 0xf5, 0xa4, 0xf8, 0x45, 0xef,
	0x65, 0xe4, 0x0d, 0x77, 0xbc, 0x56, 0xba, 0x0d, 0x58, 0x40, 0x70, 0x2d, 0x51, 0x59, 0x6b, 0x08,
	0xde, 0x0a, 0xa5, 0xc1, 0x6e, 0x21, 0x0b, 0xf8, 0x14, 0xdc, 0x9b, 0x6a, 0x4d, 0xef, 0x12, 0x64,
	0x6d, 0x39, 0xbf, 0xeb, 0x4e, 0xb1, 0xae, 0x2b, 0x38, 0xb8, 0x55, 0xf8, 0x8b, 0x38, 0x1a, 0x26,
	0xf6, 0xd9, 0xa7, 0x27, 0xff, 0xae, 0xd1, 0xb6, 0x92, 0xd1, 0x72, 0xfa, 0xd1, 0x44, 0xec, 0xb3,
	0x89, 0xd8, 0x57, 0x13, 0xb1, 0xf7, 0xef, 0x68, 0xf4, 0xe0, 0xd3, 0xdf, 0x2d, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x36, 0x4e, 0x34, 0x63, 0xcd, 0x01, 0x00, 0x00,
}
